<?php

namespace Woojin\OrderBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Woojin\Utility\Avenue\Avenue;

abstract Class AllPayStatus
{
    const NOT_ACCEPT = 0;
    const NOT_FINISH = 1;
    const FINISH = 2;
    const CANCEL = 3;
}

/**
 * InvoiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InvoiceRepository extends EntityRepository
{
    public function _findOneBy(array $condition)
    {
        $em = $this->getEntityManager();

        return $em->getRepository('WoojinOrderBundle:Invoice')->findOneBy($condition);
    }

    public function findNotYeyToAllPay($invoiceId, $customId)
    {
        return $this->_findOneBy(array(
            'id' => $invoiceId,
            'custom' => $customId,
            'status' => AllPayStatus::NOT_ACCEPT,
            'store' => 8
        ));
    }

    public function findAllPayHandling(int $invoiceId, int $customId)
    {
        return $this->_findOneBy(array(
            'id' => $invoiceId,
            'custom' => $customId,
            'status' => AllPayStatus::NOT_FINISH
        ));
    }

    public function findAllPayCanceled(int $invoiceId, int $customId)
    {
        return $this->_findOneBy(array(
            'id' => $invoiceId,
            'custom' => $customId,
            'status' => AllPayStatus::FINISH
        ));
    }

    public function findAllPayFinished(int $invoiceId, int $customId)
    {
        return $this->_findOneBy(array(
            'id' => $invoiceId,
            'custom' => $customId,
            'status' => AllPayStatus::CANCEL
        ));
    }

    public function findNotYetToGC($customId)
    {
        $em = $this->getEntityManager();
        
        $qb = $em->createQueryBuilder();

        $qb
            ->select('i')
            ->from('WoojinOrderBundle:Invoice', 'i')
            ->where(
                $qb->expr()->andX(
                    $qb->expr()->eq('i.hasPrint', 0),
                    // $qb->expr()->eq('i.isAllPay', true),
                    $qb->expr()->eq('i.custom', $customId),
                    $qb->expr()->eq('i.store', Avenue::STORE_WEBSITE),
                    $qb->expr()->in('i.status', array(AllPayStatus::NOT_ACCEPT, AllPayStatus::NOT_FINISH))
                )
            )
        ;

        $invoices = $qb->getQuery()->getResult();

        return $invoices;
    }
}
