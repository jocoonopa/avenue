<?php

namespace Woojin\StoreBundle\Entity;

use Woojin\GoodsBundle\Entity\GoodsPassport;
use Woojin\UserBundle\Entity\User;

/**
 * AuctionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AuctionRepository extends \Doctrine\ORM\EntityRepository
{
    public function findByCriteria(array $criteria)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
            ->select(array('a'))
            ->from('WoojinStoreBundle:Auction', 'a')
            ->leftJoin('a.product', 'product')
            ->leftJoin('product.status', 'product_status')
            ->leftJoin('product.color', 'product_color')
            ->leftJoin('product.brand', 'product_brand')
            ->leftJoin('a.buyer', 'buyer')
            ->leftJoin('a.seller', 'seller')
            ->leftJoin('a.creater', 'creater')
            ->leftJoin('a.bsser', 'bsser')
            ->leftJoin('a.createStore', 'create_store')
        ;

        $criteria = new AuctionCriteria($criteria, $qb);

        return $criteria->getQb()->getQuery()->getResult();
    }

    public function fetchHandlingBelongStore(Store $store)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        return $qb->select(array('auction', 'product'))
            ->from('WoojinStoreBundle:Auction', 'auction')
            ->leftJoin('WoojinGoodsBundle:GoodsPassport', 'product')
            ->where($qb->expr()->andX(
                $qb->expr()->in('auction.status', array(
                    Auction::STATUS_ONBOARD,
                    Auction::STATUS_SOLD,
                    Auction::STATUS_ORDER_CANCEL
                )),
                $qb->expr()->eq('auction.createStore', $store)
            ))
            ->getQuery()
            ->getResult()
        ;
    }

    public function fetchAuctionByProduct(GoodsPassport $product)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $res = $qb->select('auction')
            ->from('WoojinStoreBundle:Auction', 'auction')
            ->where(
                $qb->expr()->andX(
                    $qb->expr()->in('auction.status', array(
                        Auction::STATUS_ONBOARD,
                        Auction::STATUS_SOLD
                    )),
                    $qb->expr()->eq('auction.product', $product->getId())
                )
            )
            ->orderBy('auction.id', 'DESC')
            ->getQuery()
            ->getResult()
        ;

        return empty($res) ? NULL : $res[0];
    }

    public function fetchAuctionsByProduct(GoodsPassport $product)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        return $qb->select('auction')
            ->from('WoojinStoreBundle:Auction', 'auction')
            ->where($qb->expr()->eq('auction.product', $product->getId()))
            ->orderBy('auction.id', 'DESC')
            ->getQuery()
            ->getResult()
        ;
    }

    public function fetchLatestPaymentByAuction(Auction $auction)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb->select('payment')
            ->from('WoojinStoreBundle:AuctionPayment', 'payment')
            ->where(
                $qb->expr()->andX(
                    $qb->expr()->eq('payment.isCancel', ':isCancel'),
                    $qb->expr()->eq('payment.auction', ':auctionId')
                )
            )
            ->orderBy('payment.paidAt', 'DESC')
        ;

        $qb
            ->setParameter('isCancel', false)
            ->setParameter('auctionId', $auction->getId())
        ;

        return $qb->setFirstResult(0)
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult()
        ;
    }

    public function fetchPaidCompleted(User $user)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb->select('auction')
            ->from('WoojinStoreBundle:Auction', 'auction')
            ->where(
                $qb->expr()->andX(
                    $qb->expr()->eq('auction.createStore', ':createStoreId'),
                    $qb->expr()->eq('auction.profitStatus', ':profitStatus')
                )
            );

        $qb
            ->setParameter('createStoreId', $user->getStore()->getId())
            ->setParameter('profitStatus', Auction::PROFIT_STATUS_PAY_COMPLETE)
        ;

        return $qb->getQuery()->getResult();
    }
}
